{"version":3,"sources":["assets/Erangel_Main.jpg","drawing.jsx","BackgroundLayer.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Drawing","lines","storke","map","line","i","key","points","stroke","BackgroundLayer","state","image","window","Image","src","require","onload","setState","this","height","props","mapSize","width","React","Component","MapMode","ColorList","history","historyStep","App","useState","setLines","drawing","setDrawing","color","setColor","mapMode","setMapMode","stageRef","useRef","className","onClick","style","icon","isOn","previous","length","next","circleSpacing","colors","onChange","value","event","hex","onContentMousedown","onContentMousemove","e","point","current","getStage","getPointerPosition","newLines","concat","x","y","splice","onContentMouseup","push","ref","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.166e3267.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Erangel_Main.3627ce4b.jpg\";","import React from 'react'\r\nimport { Layer, Line } from \"react-konva\";\r\n\r\nexport const Drawing = ({ lines, storke }) => {\r\n    return (\r\n        <Layer >\r\n            {lines.map((line, i) => (\r\n                <Line key={i} points={line} stroke={line.storke} />\r\n            ))}\r\n        </Layer>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Layer, Image } from \"react-konva\";\r\n\r\nconst getMapAsset = () => require(`./assets/Erangel_Main.jpg`);\r\n\r\nclass BackgroundLayer extends React.Component {\r\n  state = { image: null };\r\n\r\n  componentDidMount() {\r\n    const image = new window.Image();\r\n    image.src = getMapAsset();\r\n    image.onload = () => {\r\n      this.setState({ image });\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Layer>\r\n        <Image image={this.state.image} height={this.props.mapSize} width={this.props.mapSize} />\r\n      </Layer>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BackgroundLayer;\r\n","export const MapMode = {\r\n    Drawing: \"drawing\",\r\n    Map: \"drag\"\r\n}\r\n\r\nexport const ColorList = ['#D9E3F0', '#F47373', '#37D67A', '#2CCCE4', '#dce775', '#ff8a65']","import React, { useState, useRef } from \"react\";\nimport { Stage } from \"react-konva\";\nimport { Drawing } from \"./drawing\";\nimport BackgroundLayer from \"./BackgroundLayer\";\nimport { CirclePicker } from 'react-color';\nimport { MapMode, ColorList } from \"./constants\";\nimport IconButton, { IconToggle } from '@material/react-icon-button';\nimport MaterialIcon from '@material/react-material-icon'\nimport '@material/react-icon-button/dist/icon-button.css';\nimport \"./App.css\"\n\nlet history = [[]];\nlet historyStep = 0;\nconst mapSize = 500;\n\nconst App = () => {\n  const [lines, setLines] = useState([])\n  const [drawing, setDrawing] = useState(false)\n  const [color, setColor] = useState(\"red\")\n  const [mapMode, setMapMode] = useState(MapMode.Map)\n  const stageRef = useRef(null);\n\n  const handleUndo = () => {\n    if (historyStep === 0) {\n      return;\n    }\n    historyStep -= 1;\n    const previous = history[historyStep];\n    setLines(previous);\n  };\n\n  const handleRedo = () => {\n    if (historyStep === history.length - 1) {\n      return;\n    }\n    historyStep += 1;\n    const next = history[historyStep];\n    setLines(next);\n  };\n\n  const handleMouseDown = () => {\n    setDrawing(true);\n    // add line\n    setLines([...lines, []]);\n  };\n\n  const handleMouseMove = e => {\n    // no drawing - skipping\n    if (!drawing) {\n      return;\n    }\n    const stage = stageRef.current.getStage();\n    const point = stage.getPointerPosition();\n\n    let lastLine = lines[lines.length - 1];\n    // add point\n    let newLines = lastLine.concat([point.x, point.y]);\n    newLines.storke = color;\n    // replace last\n    lines.splice(lines.length - 1, 1, newLines);\n    setLines(lines.concat());\n  };\n\n  const handleMouseUp = () => {\n    //add to history\n    history.push(lines);\n    historyStep += 1;\n\n    setDrawing(false);\n  };\n\n  const handleColorChange = (value, event) => {\n    setColor(value.hex)\n  }\n  return (\n    <div className=\"container\" >\n      <div className=\"toolbar\">\n        <IconButton onClick={\n          () => {\n            setMapMode(mapMode === MapMode.Drawing ? MapMode.Map : MapMode.Drawing)\n          }}>\n          <IconToggle >\n            <MaterialIcon style={{ color: \"#dce775\" }} icon='create' />\n          </IconToggle>\n          <IconToggle isOn >\n            <MaterialIcon style={{ color: \"#37D67A\" }} icon='room' />\n          </IconToggle>\n        </IconButton>\n        <IconButton onClick={handleUndo}>\n          <MaterialIcon style={{ color: \"white\" }} icon='undo' />\n        </IconButton>\n        <IconButton onClick={handleRedo}>\n          <MaterialIcon style={{ color: \"white\" }} icon='redo' />\n        </IconButton>\n\n        <CirclePicker\n          width=\"30px\"\n          circleSpacing={3}\n          colors={ColorList}\n          onChange={handleColorChange} />\n      </div>\n      <div className={`${mapMode === MapMode.Drawing ? \"drawing\" : \"\"}`}>\n        <Stage\n          width={mapSize}\n          height={mapSize}\n          onContentMousedown={handleMouseDown}\n          onContentMousemove={handleMouseMove}\n          onContentMouseup={handleMouseUp}\n          ref={stageRef}\n        >\n          <BackgroundLayer mapSize={mapSize} />\n          {\n            mapMode === MapMode.Drawing && (\n              <Drawing mapSize={mapSize} lines={lines} storke={color} />\n            )\n          }\n        </Stage>\n      </div>\n    </div>\n  );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}